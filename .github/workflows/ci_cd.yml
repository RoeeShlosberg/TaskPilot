name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create .env file for testing
      run: |
        cd docker
        cat > .env << EOF
        # Test environment variables
        SECRET_KEY=test-secret-key-for-github-actions-$(openssl rand -hex 16)
        JWT_SECRET_KEY=test-jwt-secret-key-for-github-actions-$(openssl rand -hex 16)
        JWT_ALGORITHM=HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
        AI_PROVIDER=openrouter
        AI_API_KEY=test-api-key-sk-or-v1-test-$(date +%s)
        REDIS_HOST=redis
        REDIS_PORT=6379        REDIS_PASSWORD=
        REDIS_DB=0
        DATABASE_URL=sqlite:///./data/test_taskpilot.db
        APP_NAME=TaskPilot-Test
        DEBUG=true
        EOF
        echo "✅ Created .env file for testing"
    
    - name: Build and start services
      run: |
        cd docker
        echo "🏗️ Building Docker images..."
        docker-compose build --no-cache
        echo "🚀 Starting services..."
        docker-compose up -d
        
    - name: Wait for services to be ready
      run: |
        cd docker
        echo "⏳ Waiting for services to start..."
        sleep 20
        
        # Check if containers are running
        echo "📋 Container status:"
        docker-compose ps
        
        # Check logs for any immediate errors
        echo "📜 Web service logs:"
        docker-compose logs web | tail -20
        
        # Wait for web service to be healthy (with timeout)
        echo "🏥 Testing web service health..."
        for i in {1..30}; do
          if docker-compose exec -T web curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "✅ Web service is healthy (attempt $i/30)"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Web service failed to become healthy after 30 attempts"
            docker-compose logs web
            exit 1
          fi
          echo "⏳ Attempt $i/30: Web service not ready yet..."
          sleep 2
        done
        
        # Final comprehensive health check
        echo "🔍 Final health check:"
        docker-compose exec -T web curl -f http://localhost:8000/health || exit 1
        
    - name: Run linting and code quality checks
      run: |
        cd docker
        echo "🔍 Running code quality checks..."
        # Check if flake8 is available, if not install it
        docker-compose exec -T web python -m pip install flake8 --quiet || true
        docker-compose exec -T web python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
        
    - name: Run tests
      run: |
        cd docker
        echo "🧪 Running comprehensive test suite..."
        
        # Run tests with detailed output
        docker-compose exec -T web pytest tests/ \
          -v \
          --tb=short \
          --color=yes \
          --durations=10 \
          --cov=app \
          --cov-report=term-missing \
          2>&1 | tee test_output.log
        
        # Check test results
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "✅ All tests passed!"
        else
          echo "❌ Some tests failed!"
          exit 1
        fi
        
    - name: Show logs on failure
      if: failure()
      run: |
        cd docker
        echo "🔍 Debugging information:"
        echo "=================================="
        echo "🐳 Container status:"
        docker-compose ps
        echo "=================================="
        echo "📜 Web service logs:"
        docker-compose logs web
        echo "=================================="
        echo "📜 Redis service logs:"
        docker-compose logs redis
        echo "=================================="
        echo "🗂️ File system check:"
        docker-compose exec -T web ls -la /app/ || true
        echo "=================================="
        echo "🔧 Environment variables:"
        docker-compose exec -T web env | grep -E "(DATABASE|REDIS|SECRET)" || true
        
    - name: Cleanup
      if: always()
      run: |
        cd docker
        echo "🧹 Cleaning up..."
        docker-compose down -v
        docker system prune -f --volumes
        echo "✅ Cleanup completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4      
    - name: Deploy to Render
      run: |
        echo "🚀 Deploying to Render..."
        echo "✅ All tests passed successfully"
        echo "🔒 Security scan completed"
        echo "📄 Using render.yaml configuration in root directory"
        echo "🌐 Render will automatically deploy on push to main branch"
        echo "🔗 Check your Render dashboard for deployment status"
        echo "🎉 Deployment pipeline completed successfully!"
        
    - name: Notify deployment
      run: |
        echo "📢 Deployment Status:"
        echo "- Repository: ${{ github.repository }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Triggered by: ${{ github.actor }}"
        echo "- Timestamp: $(date -u)"