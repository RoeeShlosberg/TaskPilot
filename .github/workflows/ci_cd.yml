name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create .env file for testing
      run: |
        cd docker
        cat > .env << EOF
        # Test environment variables
        SECRET_KEY=test-secret-key-for-github-actions
        JWT_SECRET_KEY=test-jwt-secret-key-for-github-actions
        JWT_ALGORITHM=HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
        AI_PROVIDER=openrouter
        AI_API_KEY=test-api-key
        REDIS_HOST=redis
        REDIS_PORT=6379
        REDIS_PASSWORD=
        REDIS_DB=0
        DATABASE_URL=sqlite:///./data/test_taskpilot.db
        APP_NAME=TaskPilot-Test
        DEBUG=true
        EOF
    
    - name: Build and start services
      run: |
        cd docker
        docker-compose up -d --build
        
    - name: Wait for services to be ready
      run: |
        cd docker
        
        # Check if client container is running
        echo "🔍 Checking client container status..."
        if ! docker-compose ps | grep -q "client.*Up"; then
          echo "❌ Client container failed to start"
          docker-compose logs client
          exit 1
        else
          echo "✅ Client container is running"
        fi
        
        # Wait for web service to be healthy
        echo "🔍 Waiting for web service to be healthy..."
        timeout 60s bash -c 'until docker-compose exec -T web curl -f http://localhost:8000/health; do sleep 2; done'
        
    - name: Run tests
      run: |
        cd docker
        docker-compose exec -T web pytest tests/ -v --tb=short
        
    - name: Cleanup
      if: always()
      run: |
        cd docker
        docker-compose down -v
        docker-compose rm -f
        
    - name: Show logs on failure
      if: failure()
      run: |
        cd docker
        echo "📜 Web logs:"
        docker-compose logs web || true
        echo "📜 Client logs:"
        docker-compose logs client || true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      run: |
        echo "🚀 Deploying to Render..."
        echo "✅ Render will automatically deploy on push to main branch"
        echo "📄 Using render.yaml configuration in root directory"
        echo "🔗 Check your Render dashboard for deployment status"